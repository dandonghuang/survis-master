@article{Jacky1995Medical,
  abstract = {The paper presents a formal specification in the Z notation for a safety-critical control system. It describes a particular medical device but is quite generic and should be widely applicable. The specification emphasizes safety interlocking and other discontinuous features that are not considered in classical control theory. A method for calculating interlock conditions for particular operations from system safety assertions is proposed; it is similar to ordinary Z precondition calculation, but usually results in stronger preconditions. The specification is presented as a partially complete framework that can be edited and filled in with the specific features of a particular control system. Our system is large but the specification is concise. It is built up from components, subsystems, conditions and modes that are developed separately, but also accounts for behaviors that emerge at the system level. The specification illustrates several useful idioms of the Z notation, and demonstrates that an object-oriented specification style can be expressed in ordinary Z.},
  author = {Jonathan Jacky},
  doi = {10.1109/32.345826},
  journal = {IEEE Transactions on Software Engineering},
  keywords = {type: Formal specification, process control, safety, medical applications, radiation therapy, cyclotron, Z.},
  number = {2},
  publisher = {IEEE},
  volume = {21},
  title = {Specifying a Safety-Critical Control System in Z},
  year = {1995}
}

@article{Tyler2024Medical,
  abstract = {Micro-controller units (MCUs) implement the de facto interface between the physical and digital worlds. As a consequence, they appear in a variety of sensing/actuation applications from smart personal spaces to complex industrial control systems and safety-critical medical equipment. While many of these devices perform safety- and time-critical tasks, they often lack support for security features compatible with their importance to overall system functions. This lack of architectural support leaves them vulnerable to run-time attacks that can remotely alter their intended behavior, with potentially catastrophic consequences. In particular, we note that, MCU software often includes untrusted third-party libraries (some of them closed-source) that are blindly used within MCU programs, without proper isolation from the rest of the system. In turn, a single vulnerability (or intentional backdoor) in one such third-party software can often compromise the entire MCU software state. In this article, we tackle this problem by proposing, demonstrating security, and formally verifying the implementation of UCCA: an Untrusted Code Compartment Architecture. UCCA provides flexible hardware-enforced isolation of untrusted code sections (e.g., third-party software modules) in resource-constrained and time-critical MCUs. To demonstrate UCCAâ€™s practicality, we implement an open-source version of the design on a real resource-constrained MCU: the well-known TI MSP430. Our evaluation shows that UCCA incurs little overhead and is affordable even to lowest-end MCUs, requiring significantly less overhead and assumptions than the prior related work.},
  author = {Liam Tyler and Ivan De Oliveira Nunes},
  doi = {10.1109/TCAD.2024.3444691},
  journal = {IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
  keywords = {type: Compartmentalization, embedded systems, hardware security, memory protection.},
  publisher = {IEEE},
  volume = {43},
  number = {11},
  title = {Untrusted Code Compartmentalization for Bare Metal Embedded Devices},
  year = {2024}
}

@article{Jo2009Railway,
  abstract = {Many critical control systems are developed using formal methods. When software applied to such systems is developed, the employment of formal methods in the software requirements specification and verification will provide increased assurance for such applications. Earlier error of overlooked requirement specification can be detected using formal specification method. Also the testing and full verification to examine all reachable states using model checking to undertake formal verification are able to be completed. In this paper, we proposed an eclectic approach to incorporate Z(Zed) formal language and `Statemate MAGNUM' which is formal method tools using Statechart. Also we applied the proposed method to safety-critical railway signaling systems for the formal requirement specification and analyzed the specification results.},
  author = {Hyun-Jeong Jo, Jong-Gyu Hwang and Yong-Ki Yoon},
  doi = {10.1109/TD-ASIA.2009.5356920},
  journal = {2009 Transmission & Distribution Conference & Exposition: Asia and Pacific},
  keywords = {type: Formal Specification, Railway Signaling System, Zed, Statechart. },
  publisher = {IEEE},
  title = {Formal requirements specification in safety-critical railway signaling system},
  url = {http://www.visus.uni-stuttgart.de/uploads/tx_vispublications/vast15-survis.pdf},
  year = {2009}
}

@article{Han2016Railway,
  abstract = {The integration of formal methods and requirements analysis increases the dependability of safety-critical systems. However it is still very difficult to obtain all of the safety requirements in practice, and formally construct the safety requirements model as well. In this paper, we propose an approach to capture safety requirements and formally describe them by classifying and developing safety requirements specification patterns. Our classification is a result of extracting safety properties from a variety of sources, such as interlocking tables and existing safety relevant functional requirements of railway interlocking system. They contain safety properties at analysis level and design level respectively. Furthermore, safety specification patterns based on the classification are used to formally describe and organize the safety requirements for formal verification. Finally, a tool called SRSV has been developed to enhance the process from deriving safety requirements to verifying. We applied it to the interlocking system at Mohe station in China, and the generated safety properties were then checked to hold by the verification tool.},
  author = {Li Han; Jing Liu; Tingliang Zhou; Junfeng Sun; Xiaohong Chen},
  doi = {10.1109/COMPSAC.2016.182},
  journal = {2016 IEEE 40th Annual Computer Software and Applications Conference (COMPSAC)},
  keywords = {type: safety requirements analysis, specification patterns, formal verification, interlocking systems.},
  publisher = {IEEE},
  title = {Safety Requirements Specification and Verification for Railway Interlocking Systems},
  year = {2016}
}

@article{Khan2009Railway,
  abstract = {Railway interlocking system is a safety critical system. Its malfunction can cause the loss of human life and severe injuries. To remove difficulties from this type of system better and advanced methodologies are required. This paper presents the use of Z-specification to specify the safety properties of the train system. The paper provides division of railway track into sectors and further division into segments. For the safety of the train a safe distance (open block) is associated with trains to avoid collision. Furthermore, this work uses the circular block around the crossing region. The circular block changes its state from green to red whenever it becomes occupied. Moreover the paper also specifies the safety of trains along the linear motion. This work uses the approach of promotion, which provides relation from local to global system. The authors take train as local system and relate it to the whole system through the operation of promotion. The paper also shows how formal methods are used to specify industrial application successfully.},
  author = {Sher Afzal Khan and Nazir A. Zafar},
  doi = {10.1109/IC4.2009.4909202},
  journal = {2009 2nd International Conference on Computer, Control and Communication},
  publisher = {IEEE},
  title = {Towards the formalization of railway interlocking system using Z-notations},
  year = {2009}
}

@article{Fang2014Automotive,
  abstract = {E/E systems have been widely used in safety-critical scenarios in the modern world. The system is composed of a variety of software components in an automobile now, but most of the software vendors only apply the common software process method to construct the software modules. How to avoid the irrational and ambiguous requirements has not been addressed and there is no efficient way to guarantee the correctness of the software components. In this paper, we report a new approach for developing a safety-critical software system. We show how this problem is attacked by adding or improving two software development phases on the traditional software process. Formal specification and verification techniques are employed to establish the new software development methodology. Our new approach has been applied on the verification of an OSEK/VDX standard based real-time OS and the result is encouraging.},
  author = {Qiu Fang; Chenxi Zhang; Xin Ye; Jianqi Shi; Xiaoxian Zhang},
  doi = {10.1109/ICSESS.2014.6933515},
  journal = {2014 IEEE 5th International Conference on Software Engineering and Service Science},
  keywords = {type: Software development process, Safety-critical software, Reliability, Methodology.},
  publisher = {IEEE},
  title = {A new approach for developing safety-critical software in automotive industry},
  year = {2014}
}

@article{Alotaibi2023Automotive,
  abstract = {This paper presents a methodology called Rigorous Analysis Template Process (RATP) for analysing the behaviours and interactions of multiple components in a Self-Driving Vehicle (SDV) to ensure its system safety, especially when a human driver is involved as a fallback option for handling hazardous events. RATP uses Systems-Theoretic Processes Analysis (STPA) and Event-B formal method to gradually identify safety requirements and build their rigours models. The output of RATP is a set of safety requirements that guide the development of a rigorous model to maintain the system safety against identified hazardous states at different levels of abstraction. The main advantage of RATP is to allow the behaviours of a system to be analysed from a high-abstraction layer to a more detailed concrete layer.},
  author = {Fahad Alotaibi; Thai Son Hoang; Michael Butler},
  doi = {10.1109/COMPSAC57700.2023.00262},
  journal = {2023 IEEE 47th Annual Computers, Software, and Applications Conference (COMPSAC)},
  keywords = {type: SDV, STPA, Event-B, Automated lane centering, Driver monitoring system},
  publisher = {IEEE},
  title = {A Rigorous Iterative Analysis Approach for Capturing the Safety Requirements of Self-Driving Vehicle Systems},
  year = {2023}
}

@article{Budiyanto2015Avionics,
  abstract = {Specifications of safety-critical real-time systems which are made with natural language has many disadvantages, such as contradictory, vague, ambiguous, and incomplete. The weakness in this specification will continue to the next stages, and will result the system failure. Formal methods allow the designer to determine the specifications of the system at different abstraction levels and verify the consistency of this formal specification before it is implemented. This study aimed to build and verify the formal specification of integrated modular avionics ('MA) health monitoring which use the AR'NC-653 standard using a model checking timed automata. The verified results will help developers to define logic effective of fault-tolerance, so as to guarantee the 'MA system can always available.},
  author = {Ida Bagus Budiyanto; Achmad Imam Kistijantoro; Bambang Riyanto Trilaksono},
  doi = {10.1109/ISITIA.2015.7219994},
  journal = {2015 International Seminar on Intelligent Technology and Its Applications (ISITIA)},
  keywords = {type: health monitor; IMA; timed automata; ARINC-653 },
  publisher = {IEEE},
  title = {Formal verification of integrated modular avionics (IMA) health monitoring using timed automata},
  year = {2015}
}

@article{Lakshmi2017Avionics,
  abstract = {A study and analysis of software errors has been carried out. The present study analyzed approximately 400 errors of safety critical Navigation system software in 10 project variants. Framework used was: (i) Identification of types and severity of errors (ii) Gathering errors from error database and categorizing them according to the type and severity (iii) Recognition of the pattern and deriving the relation to software change rationale (iv) Proposing the error prevention guidelines for software requirements specification and code implementation for future software projects as a part of Software Quality Assurance (SQA) process. The main aim is to propose the error prevention guidelines that are practical to be implemented despite the project schedules. This is considered valuable outcome of the Independent Verification and Validation (IV&V) effort carried out for this safety critical embedded software.},
  author = {Lakshmi K.V.N.S. and Sanjeev Kumar },
  doi = {https://doi.org/10.1007/978-981-10-6544-6_23},
  journal = {Communications in Computer and Information Science},
  publisher = {Springer, Singapore},
  title = {Analysis of Errors in Safety Critical Embedded System Software in Aerial Vehicle},
  year = {2017}
}

@article{Nanda2019Survey,
  abstract = {Safety critical systems are systems where a failure to find a fault can cause serious harm to the environment and people or even can lead to loss of life. The most important requirement of the system is to keep it fault free. This will be possible if the system is subject to development and verification in a systematic approach. Formal specification methods, as the name suggests, are truly formal with a strong mathematical background that can be trusted to facilitate the development of fault-free systems. The paper will discuss examples of safety-critical systems and some common type of errors that are found in the development of such systems will be discussed. The paper will examine how different domains affect the standards of formal specification methods in different applications. The approach will be to survey various papers in the related fields.},
  author = {Smruti Priyambada Nanda and Emanuel S. Grant},
  doi = {10.1109/INFOCT.2019.8711369},
  journal = { 2019 IEEE 2nd International Conference on Information and Computer Technologies (ICICT)},
  keywords = {type: safety-critical system; requirement errors; medical equipment; railways; automotive; avionics},
  publisher = {IEEE},
  title = {A Survey of Formal Specification Application to Safety Critical Systems},
  year = {2019}
}